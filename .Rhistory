find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
exit
q()
install.packages("swirl")
library("swirl")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,93.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
exit()
exit
bye()
x
quit
swirl()
library(swirl)
swril()
swirl()
getwd()
ls()
x<-9
play()
ls()
nxt()
ls()
list.files()
?list.files
list.files(recursive=TRUE)
?args
args(list.files)
old.dir <- getwd()
mkdir testdir
dir.create(testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
dir.create("testdir2\testdir3", recursive=TRUE)
dir.create("testdir2/testdir3", recursive = TRUE)
?dir.remove
?remove
remove("testdir2")
?unlink
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
list.files()
unlink("testdir", recursive = true)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq<- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times =10)
rep(c(0,1,2), each =10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_chart
my_char
paste(my_char, collapse = " ")
c(my_char, "Juliana")
my_name<-c(my_char, "Juliana")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z),100)
is.na(my_na)
my_na<- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
exit()
q()
library("swirl")
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
--
c()
x[3,5,7]
c(x[3], x[5], x[7])
w<- c(3,5,7)
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar= 2, norf= NA)
vect
names(vect)
vect2 <-c(11, 2, NA)
names(vect2)<- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<- c(1:20)
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix( data = 1:20, nrow= 4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames("patient","age","weight","bp","rating","test")
cnames<- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
TRUE==TRUEE
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6 < 7
10 <=10
5!=7
!(5=7)
!(5==7)
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which( ints >7 )
any(ints)
any( ints<0 )
all ( ints > 0 )
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<- sapply(flags, class)
class(cls_vect)
sum(flags$orannge)
sum(flags$orannge)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE).
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample( c(0,1) , 100, replace = TRUE , prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, sise = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10 , mean = 100, sd = 25)
rpois(5)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpais(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
q()
x <- c(4, TRUE)
x
class(x)
x <- 4
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x)
x <- 1:4
x
y <- 2
y
c <- x + y
c
class(c)
x <- c(3, 5, 1, 10, 12, 6)
x
x[x %in% 1:5] <- 0
y <- x[x %in% 1:5] <- 0
y
y <- x[x == 6] <- 0
y
y <- x[x < 6] == 0
y
y<- x[x > 6] <- 0
y
y<- x[x %in% 1:5]
y
y<- x[x == 6]
y
y<- x[x < 6]
y
y<- x[x > 6]
y
View(my_pois)
hw1_data <- read.csv("C:/Temp/Coursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
View(hw1_data)
hw1_data[2]
head
head(hw1_data, 2)
tail(hw1_data, 2)
head(hw1_data, 47)
library("swirl")
swirl()
x<- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z)
;
my_data <- sample(c(y, z)
)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
q()
hw1_data <- read.csv("C:/Temp/Coursera/datasciencecoursera/hw1_data.csv")
View(hw1_data)
library("swirl")
x <- c(1,2,NA,3)
x
mean(x)
mean(x, na.rm=TRUE)
swirl
swirl()
Inf-Inf
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
my_matrix = my_matrix2
identical( my_matrix ,my_matrix2)
patients("Bill", "Gina", "Kelly", "Sean")
patients<- c("Bill", "Gina", "Kelly", "Sean")
Q()
q()
debug(ls)
?debug
setwd("C:/Temp/Coursera/datasciencecoursera")
y <- 10
f <- function(x) {
y <- 2
y^2+ g(x)
}
g <- function(x) {
x*y
}
f(3)
setwd("C:/Documents and Settings/Admin/programmingassignment2/ProgrammingAssignment2")
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
source(cachematrix)
source(cachematrix.R)
source("cachematrix.R")
c
cacheSolve(c)
myMatrix <- makeCacheMatrix(c)
source("cachematrix.R")
myMatrix <- makeCacheMatrix(c)
cacheSolve(myMatrix)
source("cachematrix.R")
myMatrix <- makeCacheMatrix(c)
cacheSolve(myMatrix)
class(myMatrix)
source("cachematrix.R")
myMatrix <- makeCacheMatrix(c)
source("cachematrix.R")
myMatrix <- makeCacheMatrix(c)
cacheSolve(myMatrix)
cacheSolve(myMatrix)
B = matrix(4:7,nrow=2,ncol=2)
fList <- makeCacheMatrix(B)
cacheSolve(fList) #first call, this will compute the inverse
cacheSolve(fList) #second call, this will get the result from the cache
